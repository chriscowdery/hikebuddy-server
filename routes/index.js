var express = require('express');
var router = express.Router();
const childProcess = require('child_process');

var _hikers = [];

var _messages = [];
var _messageOutbox = [];

/* GET home page. */
router.get('/hikers', function(req, res, next) {

    res.contentType('application/json');

    res.send(JSON.stringify(_hikers));
});

router.get('/', function(req, res, next) {
    res.render('index', { hikers: _hikers });
});


router.post('/add_hiker', function(req, res, next) {

    res.set('Content-Type', 'application/json');

    var hikerObj = {};
    
    if (req.body.name == null) {

        var failResponse = {};
        failResponse["status"] = "fail";
        failResponse["description"] = "No name provided";

        res.status(400);
        res.send(JSON.stringify(failResponse));

        return;
    }
    
    hikerObj["name"] = req.body.name;

    if (req.body.latitude == null) {

        var failResponse = {};
        failResponse["status"] = "fail";
        failResponse["description"] = "No latitude provided";

        res.status(400);
        res.send(JSON.stringify(failResponse));

        return;
    }

    hikerObj["latitude"] = req.body.latitude;

    if (req.body.longitude == null) {

        var failResponse = {};
        failResponse["status"] = "fail";
        failResponse["description"] = "No longitude provided";

        res.status(400);
        res.send(JSON.stringify(failResponse));

        return;
    }

    hikerObj["longitude"] = req.body.longitude;

    // Optional
    hikerObj["signal_stength"] = signalStrengthForRemoteAddress(req.connection.remoteAddress);

    // Autogenerated
    hikerObj["lastUpdated"] = new Date();

    hikerObj["lost"] = false;

    _hikers.push(hikerObj);

    var successResponse = {};
    successResponse["id"] = _hikers.indexOf(hikerObj);
    successResponse["status"] = "ok";

    res.send(JSON.stringify(successResponse));
});

function signalStrengthForRemoteAddress(remoteAddress)
{
    var indexOfColon = remoteAddress.lastIndexOf(':');
    var ip;

    if (indexOfColon == -1) {
        ip = remoteAddress;
    }
    else {
        ip = remoteAddress.substring(indexOfColon + 1, remoteAddress.length);
    }

    //console.log("signal strength");
    //console.log("Detected IP:" + ip);

    // Functionality only supported on production HW
    if (remoteAddress.substring(0, 11) != "192.168.42.") {
        return "Unknown";
    }

    // Look up MAC via ARP
    var macAddress = "Unknown";

    try {
        macAddress = p_execSync("arp | grep " + ip + " | awk '{print $3}'");
    }
    catch (err) {
        console.log(err);
        console.log(err.message);
    }

    //console.log("mac:" + macAddress);

    // Then use iw to get the current dBm
    var signaldBm = parseInt(p_execSync("iw wlan0 station get " + macAddress + " | grep 'signal:' | awk '{print $2}'"));

    //console.log("dbm:" + signaldBm);

    // http://www.metageek.com/training/resources/understanding-rssi.html
    var strength = {};

    strength["signaldBm"] = signaldBm;

    if (signaldBm >= -30) {
        strength["scale"] = 1;
        strength["human_readable"] = "Fucking Amazing";
    }
    else if (signaldBm >= -50) {
        strength["scale"] = 0.8;
        strength["human_readable"] = "Alright";
    }
    else if (signaldBm >= -60) {
        strength["scale"] = 0.6;
        strength["human_readable"] = "Cromulent";
    }
    else if (signaldBm >= -70) {
        strength["scale"] = 0.4;
        strength["human_readable"] = "Respectable";
    }
    else if (signaldBm >= -80) {
        strength["scale"] = 0.2;
        strength["human_readable"] = "Fucking Awful";
    }
    else {
        strength["scale"] = 0.0;
        strength["human_readable"] = "DANGER ZONE";
    }

    return strength;
}

function p_execSync(command)
{
    return childProcess.execSync(command).toString().trim();
}

router.post('/update_hiker/:id', function(req, res, next) {

    res.contentType('application/json');

    var id = req.params.id;

    if (id == null) {
        var failResponse = {};
        failResponse["status"] = "fail";
        failResponse["description"] = "No id provided";

        res.status(400);
        res.send(JSON.stringify(failResponse));

        return;
    }

    var hikerObj = _hikers[id];

    if (hikerObj == null) {
        var failResponse = {};
        failResponse["status"] = "fail";
        failResponse["description"] = "No hiker found for id " + id;

        res.status(400);
        res.send(JSON.stringify(failResponse));

        return;
    }

    if (req.body.latitude == null) {

        var failResponse = {};
        failResponse["status"] = "fail";
        failResponse["description"] = "No latitude provided";

        res.status(400);
        res.send(JSON.stringify(failResponse));

        return;
    }

    hikerObj["latitude"] = req.body.latitude;

    if (req.body.longitude == null) {

        var failResponse = {};
        failResponse["status"] = "fail";
        failResponse["description"] = "No longitude provided";

        res.status(400);
        res.send(JSON.stringify(failResponse));

        return;
    }

    hikerObj["longitude"] = req.body.longitude;

    // Optional
    hikerObj["signal_stength"] = signalStrengthForRemoteAddress(req.connection.remoteAddress);

    // Autogenerated
    hikerObj["lastUpdated"] = new Date();

    // See if any messages exist for the hiker.
    var newMessages = [];

    var outboxLength = _messageOutbox.length;

    for (var i = 0; i < outboxLength; i++) {
        var message = _messageOutbox[i];

        if (message.to == hikerObj) {
            newMessages.push(message);
        }
    }

    for (var i = 0; i < newMessages.length; i++) {
        var deliveredMessage = newMessages[i];

        // Is this thread safe? I don't think so.
        // Maybe we should use Redis :-)
        var outboxIndex = _messageOutbox.indexOf(deliveredMessage);

        if (outboxIndex > -1) {
            _messageOutbox.splice(outboxIndex, 1);
        }

        var messageIndex = _messages.indexOf(deliveredMessage);
        var globalMessage = _messages[messageIndex];

        globalMessage["delivered"] = true;
    }

    var successResponse = {};
    successResponse["status"] = "ok";
    successResponse["new_messages"] = newMessages;

    res.send(JSON.stringify(successResponse));
});

router.get('/messageStatus/:id', function(req, res, next) {

    res.contentType('application/json');

    var id = req.params.id;

    if (id == null) {
        var failResponse = {};
        failResponse["status"] = "fail";
        failResponse["description"] = "No id provided";

        res.status(400);
        res.send(JSON.stringify(failResponse));

        return;
    }

    var message = _messages[id];

    if (message == null) {
        var failResponse = {};
        failResponse["status"] = "fail";
        failResponse["description"] = "No message available with id: " + id;

        res.status(400);
        res.send(JSON.stringify(failResponse));

        return;
    }

    // LOLSECURITY
    res.send(JSON.stringify(message));
});


router.post('/remove_hiker/:id', function(req, res, next) {

    res.contentType('application/json');

    var id = req.params.id;

    if (id == null) {
        var failResponse = {};
        failResponse["status"] = "fail";
        failResponse["description"] = "No id provided";

        res.status(400);
        res.send(JSON.stringify(failResponse));

        return;
    }

    _hikers[id] = {};

    var successResponse = {};
    successResponse["status"] = "ok";

    res.send(JSON.stringify(successResponse));
});

router.post('/message/:to_id/from/:from_id', function(req, res, next) {

    res.contentType('application/json');

    var toId = req.params.to_id;
    var fromId = req.params.from_id;

    if (toId == null) {
        var failResponse = {};
        failResponse["status"] = "fail";
        failResponse["description"] = "No to id provided";

        res.status(400);
        res.send(JSON.stringify(failResponse));

        return;
    }

    if (fromId == null) {
        var failResponse = {};
        failResponse["status"] = "fail";
        failResponse["description"] = "No from id provided";

        res.status(400);
        res.send(JSON.stringify(failResponse));

        return;
    }

    var toHiker = _hikers[toId];
    var fromHiker = _hikers[fromId];

    if (req.body.message == null) {

        var failResponse = {};
        failResponse["status"] = "fail";
        failResponse["description"] = "No message provided";

        res.status(400);
        res.send(JSON.stringify(failResponse));

        return;
    }

    var textMessage = req.body.message;

    if (req.body.sendTime == null) {

        var failResponse = {};
        failResponse["status"] = "fail";
        failResponse["description"] = "No sendTime provided";

        res.status(400);
        res.send(JSON.stringify(failResponse));

        return;
    }

    var sendTime = req.body.sendTime;

    var messageObj = {};
    messageObj["sendTime"] = sendTime;
    messageObj["from"] = fromHiker;
    messageObj["to"] = toHiker;
    messageObj["message"] = textMessage;
    messageObj["delivered"] = false;
    messageObj["read"] = false;

    _messages.push(messageObj);
    _messageOutbox.push(messageObj);

    var successResponse = {};
    successResponse["message_id"] = _messages.indexOf(messageObj);
    successResponse["status"] = "ok";

    res.send(JSON.stringify(successResponse));
});

router.post('/mark_lost/:id', function(req, res, next) {

    res.contentType('application/json');

    var id = req.params.id;

    if (id == null) {
        var failResponse = {};
        failResponse["status"] = "fail";
        failResponse["description"] = "No id provided";

        res.status(400);
        res.send(JSON.stringify(failResponse));

        return;
    }

    var hikerObj = _hikers[id];
    hikerObj["lost"] = true;

    var successResponse = {};
    successResponse["status"] = "ok";

    res.send(JSON.stringify(successResponse));

});

router.post('/mark_found/:id', function(req, res, next) {

    res.contentType('application/json');

    var id = req.params.id;

    if (id == null) {
        var failResponse = {};
        failResponse["status"] = "fail";
        failResponse["description"] = "No id provided";

        res.status(400);
        res.send(JSON.stringify(failResponse));

        return;
    }

    var hikerObj = _hikers[id];
    hikerObj["lost"] = false;

    var successResponse = {};
    successResponse["status"] = "ok";

    res.send(JSON.stringify(successResponse));

});

module.exports = router;
